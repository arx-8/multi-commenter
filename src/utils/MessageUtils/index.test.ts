import {
  checkMessageState,
  checkRemainingStatus,
  concatAsTweet,
  countRemaining,
  getLength,
} from "."

describe("getLength", () => {
  it("exact", () => {
    expect.hasAssertions()
    expect(getLength("")).toStrictEqual(0)
    expect(getLength("aaa")).toStrictEqual(3)
    expect(getLength("„ÅÇa")).toStrictEqual(3)
    expect(getLength("„ÅÇ„ÅÇ„ÅÇ")).toStrictEqual(6)
    expect(getLength("üçûüëèüê¨")).toStrictEqual(6)
  })
})

describe("countRemaining", () => {
  it("exact", () => {
    expect.hasAssertions()
    expect(countRemaining("")).toStrictEqual(200)
    expect(countRemaining("aaa")).toStrictEqual(197)
    expect(countRemaining("„ÅÇa")).toStrictEqual(197)
    expect(countRemaining("„ÅÇ„ÅÇ„ÅÇ")).toStrictEqual(194)
    expect(countRemaining("üçûüëèüê¨")).toStrictEqual(194)
    expect(
      countRemaining(
        "aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa.aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa."
      )
    ).toStrictEqual(0)
  })
})

describe("checkRemainingStatus", () => {
  it("exact", () => {
    expect.hasAssertions()
    expect(checkRemainingStatus(100)).toStrictEqual("ok")
    expect(checkRemainingStatus(99)).toStrictEqual("warn")
    expect(checkRemainingStatus(0)).toStrictEqual("warn")
    expect(checkRemainingStatus(-1)).toStrictEqual("error")
  })
})

describe("concatAsTweet", () => {
  it("exact", () => {
    expect.hasAssertions()
    expect(concatAsTweet("main", "suffix")).toStrictEqual("main suffix")
    expect(concatAsTweet("", "")).toStrictEqual("")
    expect(concatAsTweet(" ", "„ÄÄ")).toStrictEqual(" ")
    expect(concatAsTweet("main text", "")).toStrictEqual("main text")
    expect(concatAsTweet(" main text ", " ")).toStrictEqual(" main text ")
    expect(
      concatAsTweet(
        `Êú´Â∞æÊîπË°å„ÅÆÂ†¥Âêà
`,
        "#twitter"
      )
    ).toStrictEqual(`Êú´Â∞æÊîπË°å„ÅÆÂ†¥Âêà
#twitter`)
    expect(
      concatAsTweet(
        `final new line


`,
        "#twitter"
      )
    ).toStrictEqual(`final new line


#twitter`)
  })
})

describe("isValidComment", () => {
  it("valid", () => {
    expect.hasAssertions()
    expect(checkMessageState("aaa", "sss", true)).toStrictEqual({
      isPostable: true,
      remainingNum: 193,
    })
    expect(checkMessageState("„ÅÇa", "", true)).toStrictEqual({
      isPostable: true,
      remainingNum: 197,
    })
    expect(checkMessageState("„ÅÇ„ÅÇ„ÅÇ", "#", true)).toStrictEqual({
      isPostable: true,
      remainingNum: 192,
    })
    expect(checkMessageState("üçûüëèüê¨", " ", true)).toStrictEqual({
      isPostable: true,
      remainingNum: 194,
    })
    expect(
      checkMessageState(
        "aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa.aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa.",
        "long",
        true
      )
    ).toStrictEqual({
      isPostable: true,
      remainingNum: 0,
    })
    expect(
      checkMessageState(
        `
„ÅÇ

„ÅÇ`,
        "many line break",
        true
      )
    ).toStrictEqual({
      isPostable: true,
      remainingNum: 177,
    })
  })

  it("invalid", () => {
    expect.hasAssertions()
    expect(checkMessageState("aaa", "sss", false)).toStrictEqual({
      isPostable: false,
      remainingNum: 193,
    })
    expect(checkMessageState("", " ", true)).toStrictEqual({
      isPostable: false,
      remainingNum: 200,
    })
    expect(
      checkMessageState("aaahttps://www.example.com/", "suffix", true)
    ).toStrictEqual({
      isPostable: false,
      remainingNum: 166,
    })
    expect(checkMessageState("„ÅÇhttp://", "", true)).toStrictEqual({
      isPostable: false,
      remainingNum: 191,
    })
    expect(
      checkMessageState(
        "aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa.aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aa",
        "too long",
        true
      )
    ).toStrictEqual({
      isPostable: false,
      remainingNum: -1,
    })
    expect(
      checkMessageState(
        `
„ÅÇ


„ÅÇ`,
        "too many line break",
        true
      )
    ).toStrictEqual({
      isPostable: false,
      remainingNum: 172,
    })
  })
})
